detekt {

  // Version of detekt that will be used. When unspecified the latest detekt
  // version found will be used. Override to stay on the same version.
  toolVersion = "1.23.6"

  // The directories where detekt looks for source files.
  // Defaults to `files("src/main/java", "src/test/java", "src/main/kotlin", "src/test/kotlin")`.
  source = files(
      "src/main/kotlin",
      "src/main/java",
      "gensrc/main/kotlin"
  )

  // Builds the AST in parallel. Rules are always executed in parallel.
  // Can lead to speedups in larger projects. `false` by default.
  parallel = true

  // Try to auto-correct issues that don't require user's input
  // work's similarly to ktlintFormat
  autoCorrect = true

  // Define the detekt configuration(s) you want to use.
  // Defaults to the default detekt configuration.
  config.setFrom("$rootDir/quality/detekt.yml")

  // Applies the config files on top of detekt's default config file. `false` by default.
  buildUponDefaultConfig = false

  // Turns on all the rules. `false` by default.
  allRules = false

  // Specifying a baseline file. All findings stored in this file in subsequent runs of detekt.
  baseline = file("path/to/baseline.xml")

  // Disables all default detekt rulesets and will only run detekt with custom rules
  // defined in plugins passed in with `detektPlugins` configuration. `false` by default.
  disableDefaultRuleSets = false

  // Adds debug output during task execution. `false` by default.
  debug = false

  // If set to `true` the build does not fail when the
  // maxIssues count was reached. Defaults to `false`.
  ignoreFailures = false

  // Android: Don't create tasks for the specified build types (e.g. "release")
  ignoredBuildTypes = ["release"]

  // Android: Don't create tasks for the specified build flavor (e.g. "production")
  ignoredFlavors = ["production"]

  // Android: Don't create tasks for the specified build variants (e.g. "productionRelease")
  ignoredVariants = ["productionRelease"]

  // Specify the base path for file paths in the formatted reports.
  // If not set, all file paths reported will be absolute file path.
  basePath = projectDir
}

configurations {
  ktlint
}

dependencies {
  ktlint(libs.ktlint.cli) {
    attributes {
      attribute(Bundling.BUNDLING_ATTRIBUTE, getObjects().named(Bundling, Bundling.EXTERNAL))
    }
  }
  // additional 3rd party ruleset(s) can be specified here
  // just add them to the classpath (e.g. ktlint 'groupId:artifactId:version') and
  // ktlint will pick them up
}

// see https://github.com/pinterest/ktlint#usage for more
tasks.register('ktlint', JavaExec) {
  description = "Check Kotlin code style."
  classpath = configurations.ktlint
  mainClass = "com.pinterest.ktlint.Main"
  // Fixes a known ktlint issue https://github.com/pinterest/ktlint/issues/1195
  jvmArgs("--add-opens", "java.base/java.lang=ALL-UNNAMED")
  args("src/**/*.kt", "--editorconfig=${rootDir}/.editorconfig")
  // to generate report in checkstyle format prepend following args:
  // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
  // to add a baseline to check against prepend following args:
  // "--baseline=ktlint-baseline.xml"
  // see https://github.com/pinterest/ktlint#usage for more
}

tasks.register('ktlintFormat', JavaExec) {
  description = "Fix Kotlin code style deviations."
  classpath = configurations.ktlint
  mainClass = "com.pinterest.ktlint.Main"
  // Fixes a known ktlint issue https://github.com/pinterest/ktlint/issues/1195
  jvmArgs("--add-opens", "java.base/java.lang=ALL-UNNAMED")
  args("src/**/*.kt", "--format", "--editorconfig=${rootDir}/.editorconfig")
}